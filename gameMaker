/**
 * Class Name: gameMaker
 * @author Sienna Ifill
 * Created on: 4/5/2024
 * Description: 
 *   game is set up and run in main method
 *   some helper methods to run game effectively
 */
import java.util.Scanner;

public class gameMaker {
	
	public static void main(String args[]) {
		Scanner scan = new Scanner(System.in);
		// initializes objects for game
		Deck deck = new Deck();
		deck.Shuffle();
		Pile pile = new Pile(deck.getPile());
		Tableau tab = new Tableau(deck.getTableau());
		Foundation found = new Foundation();
		// game is played in while loop until user wins or quits
		while(!found.gameOver()) {
			System.out.print("Pile: ");
			pile.printPile(); System.out.println("");
			System.out.println("Foundation: ");
			found.printFoundation(); System.out.println("");
			System.out.println("Tableau:");
			boolean working = false;
			// try/catch block surrounds tableau print statement because it doesn't work if the print statement isn't 7x7
			try {
				tab.printTableau();
				working = true;
			}catch(ArrayIndexOutOfBoundsException e) {
				if(!working) {
					for(int i = 0; i < 7; i++) {
						System.out.println("");
						System.out.print("Tableau stack "+(i+1)+": ");
						tab.getStack(i+1).printStack();
					}
				}
			}
			// User chooses which card/object to interact with and is sent to appropriate method
			System.out.println("Interact with: pile (1), tableau (2), or take a card from foundation (3). Any other entry will quit the program");
			String choice = scan.next();
			if(choice.charAt(0) == '1') {
				pileInteraction(pile, found, tab);
			}else if(choice.charAt(0) == '2') {
				tabInteraction(pile, found, tab);
			}else if(choice.charAt(0) == '3'){
				foundInteraction(pile, found, tab);
			}else {
				System.out.println("quit? (0) for no: ");
				choice = scan.next();
				if(choice.charAt(0) != 0)
					break;	
			}
		}
		if(found.gameOver()) {
			System.out.println("YOU WIN!!!!!!");
			System.out.println("Foundation: ");
			found.printFoundation(); System.out.println("");
			System.out.println("Tableau:");
			boolean working = false;
			// try/catch block surrounds tableau print statement because it doesn't work if the print statement isn't 7x7
			try {
				tab.printTableau();
				working = true;
			}catch(ArrayIndexOutOfBoundsException e) {
				if(!working) {
					for(int i = 0; i < 7; i++) {
						System.out.println("");
						System.out.print("Tableau stack "+(i+1)+": ");
						tab.getStack(i+1).printStack();
					}
				}
			}
		} // game playing algorithm will go below
		else {
			Finisher cpu = new Finisher(pile, found, tab);
			if(cpu.canEnd()) {
				System.out.println("RUNNING CPU");
				cpu.ender();
				System.out.println("GAME OVER");
			}else if (cpu.canClearPile()) {
				//System.out.println("RUNNING CPU");
				cpu.clearPile();
			}else {
				cpu.play();
			}
		}
	}
	
	// player can either flip the top card in the pile, or add the card to the tableau or foundation
	public static void pileInteraction(Pile pile, Foundation found, Tableau tab) {
		Scanner scan = new Scanner(System.in);
		System.out.println("Flip pile (1), add card to foundation (2), or add card to tableau (3)");
		String choice = scan.next();
		if(choice.charAt(0) == '1') {
			if(!pile.isEmpty()) {
				pile.flip();
				return;
			}
		// choice statements are out of order because I changed my mind about the order when adding the foundInteraction() method
		}else if(choice.charAt(0) == '3') {
			Card card = pile.getTop();
			int suit = card.getSuit();
			if(found.getFStack(suit).canAdd(card)) {
				found.getFStack(suit).addCard(card);
				pile.take();
			}else {
				System.out.print("INVALID OPERATION");
			}
		}else if(choice.charAt(0) == '2') {
			System.out.println("Choose tableau stack to add to (1-7)");
			int tabstack = scan.nextInt();
			if(tabstack < 1 || tabstack > 8) {
				System.out.println("INVALID STACK NUMBER");
				return;
			}
			Card card = pile.getTop();
			boolean canPlace = tab.getStack(tabstack).canAdd(card);
			// makes sure card is being used correctly before adding it to tableau
			if(canPlace) {
				card.setVisible(true);
				tab.getStack(tabstack).addCard(card);
				pile.take();
				System.out.println(card.getShortName()+" added to tableau.");
			}else {
				System.out.println("INVALID OPERATION -- card cannot be placed");
			}
		}else {
			System.out.println("INVALID CHOICE");
		}
	}
	
	// player picks a card and can change its stack or add the card to the foundation
	public static void tabInteraction(Pile pile, Foundation found, Tableau tab) {
		Scanner scan = new Scanner(System.in);
		System.out.println("Choose tableau stack (1-7)");
		int tabstack = scan.nextInt();
		if(tabstack < 1 || tabstack > 8) {
			System.out.println("INVALID STACK NUMBER");
			return;
		}
		System.out.println("Do you want to move a card from this stack to another stack (1) or the foundation (2) ?");
		String choice = scan.next();
		if(choice.charAt(0) == '1') {
			System.out.println("State value of card you want to move (Ace = 1, Jack = 11, etc)");
			int val = scan.nextInt();
			System.out.println("Choose tableau stack to place card(s) on (1-7)");
			int newTab = scan.nextInt();
			if(newTab < 1 || newTab > 8 || newTab == tabstack) {
				System.out.println("INVALID STACK NUMBER");
				return;
			}
			//case 1, card being moved is at top of stack
			if(val == tab.getStack(tabstack).getTop().getInfo().getVal()) {
				if(tab.getStack(newTab).canAdd(tab.getStack(tabstack).getTop().getInfo())) {
					Card card = tab.getStack(tabstack).removeTop();
					tab.getStack(newTab).addCard(card);
				}else {
					System.out.println("INVALID STACK NUMBER");
					return;
				}
			}//case 2, card being removed has cards on top of it (must be visible)
			else {
				if(tab.getStack(tabstack).cardExists(val)) {
					Card card = tab.getStack(tabstack).getCard(val);
					if(tab.getStack(tabstack).switchStack(card, tab.getStack(newTab))) {
						return;
					}else {
						System.out.println("INVALID OPERATION");
						return;
					}
				}else {
					System.out.println("A card of this value does not exist.");
					return;
				}
			}
		}else if(choice.charAt(0) == '2') {
			Card card = tab.getStack(tabstack).getTop().getInfo();
			int suit = card.getSuit();
			if(found.getFStack(suit).canAdd(card)) {
				found.getFStack(suit).addCard(card);
				tab.getStack(tabstack).removeTop();
			}
		}else {
			System.out.println("INVALID CHOICE");
		}
	}

	// player can move a card from foundation to the tableau
	public static void foundInteraction(Pile pile, Foundation found, Tableau tab) {
		Scanner scan = new Scanner(System.in);
		System.out.println("Choose suit (hearts = 1, spades = 2, diamonds = 3, clubs = 4): ");
		String choice = scan.next();
		Card card = new Card(0,0);
		if(choice.charAt(0)=='1') {
			card = found.getFStack(2).seeTop();
			if(!card.validCard()) {
				System.out.println("INVALID OPERATION, EMPTY STACK");
				return;
			}
		}else if(choice.charAt(0)=='2') {
			card = found.getFStack(4).seeTop();
			if(!card.validCard()) {
				System.out.println("INVALID OPERATION, EMPTY STACK");
				return;
			}
		}else if(choice.charAt(0)=='3') {
			card = found.getFStack(1).seeTop();
			if(!card.validCard()) {
				System.out.println("INVALID OPERATION, EMPTY STACK");
				return;
			}
		}else if(choice.charAt(0)=='4') {
			card = found.getFStack(3).seeTop();
			if(!card.validCard()) {
				System.out.println("INVALID OPERATION, EMPTY STACK");
				return;
			}
		}else {
			System.out.println("INVALID CHOICE");
			return;
		}
		card.setVisible(true);
		System.out.println("Choose a stack to add the card to (1-7): ");
		int tabstack = scan.nextInt();
		if(tabstack < 1 || tabstack > 8) {
			System.out.println("INVALID STACK NUMBER");
			return;
		}
		boolean canPlace = tab.getStack(tabstack).canAdd(card);
		if(canPlace) {
			tab.getStack(tabstack).addCard(card);
			if(choice.charAt(0)=='1') {
				found.getFStack(2).removeTop();
			}else if(choice.charAt(0)=='2') {
				found.getFStack(4).removeTop();
			}else if(choice.charAt(0)=='3') {
				found.getFStack(1).removeTop();
			}else if(choice.charAt(0)=='4') {
				found.getFStack(3).removeTop();
			}
			//System.out.println(card.getShortName()+" added to tableau.");
		}else {
			System.out.println("INVALID OPERATION -- card cannot be placed");
		}
	}
}
