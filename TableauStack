/**
 * Class Name: TableauStack
 * @author Sienna Ifill
 * Created on: 3/23/2024
 * Description: 
 *   creates a single linked list utilized in the larger tableau function
 */


import java.lang.Math;
//initializes the card stack with only the top card marked as visible

public class TableauStack implements LinkedCards{
	private LLNode<Card> top;
	private int length;
	//takes an initial length and card array of appropriate size and initializes stack
	public TableauStack(int length, Card[] deckpart) {
		top = new LLNode<Card>(deckpart[0]);
		if(length == 1)
			this.length = 1;
		if(length > 1) {
			for(int i = 0; i < deckpart.length; i++) {
				addCard(deckpart[i]);
			}
		}
		//initializes the card stack with only the top card marked as visible
		top.info.setVisible(true);
		System.out.println(top.getInfo().getName()+" is the top, visible card");
		
	}
	
	//interface is used but stack can never be full
	public boolean isFull() {return false;}

	
	//links card to top and makes it the new top
	public void addCard(Card nextCard) {
		LLNode<Card> next = new LLNode<Card>(nextCard);
		next.setLink(top);
		top = next;
		length++;
		//System.out.println(nextCard.getName()+" added. Length is now "+length);
	}

	//used for adding cards from pile to TableauStacks
	public boolean canAdd(Card nextCard) {
		if(top == null) {
			if(nextCard.getVal() == 13) 
				return true;
			System.out.println("Top == null, card val != 13");
			return false;
		}
		if(nextCard.getColor() != top.getInfo().getColor()&& nextCard.getVal() == top.getInfo().getVal()-1) {
			return true;
		}
		System.out.println(nextCard.getVal()+" cannot be placed on "+top.getInfo().getVal());
		return false;
	}

	//removes top card from stack and returns the card to store in a different place
	public Card removeTop() {
		if(length != 0)
			length--;
		if(top == null) {
			System.out.println("INVALID OPERATION, STACK IS EMPTY");
			return null;
		}
		else {
			Card oldTop = top.getInfo();
			if(top.link == null) {
				top = null;
				//System.out.println("This stack should now be empty");
				length = 0;
			}else {
				top = top.getLink();
				top.info.setVisible(true);
			}
			return oldTop;
		}
	}

	// returns true if a card is in the stack and visible
	public boolean cardExists(int val) {
		LLNode<Card> pointer = top;
		int count = 0;
		//finds move card
		while(pointer != null && pointer.info.getVisible()) {
			if(pointer.info.getVal() == val)
				break;
			pointer = pointer.getLink();
			count++;
		}
		if(pointer == null)
			return false;
		//checks if card was found
		if(pointer.getInfo().getVal() == val && pointer.info.getVisible())
			return true;
		return false;
	}

	// gets a card with a given value if it exists and is visible, used in tandem with previous message
	public Card getCard(int val) {
		LLNode<Card> pointer = top;
		int count = 0;
		//finds move card
		while(pointer != null && pointer.info.getVisible()) {
			if(pointer.info.getVal() == val)
				break;
			pointer = pointer.getLink();
			count++;
		}
		return pointer.getInfo();	
	}

	//find a visible card in a stack and keeps link to all cards above it, moving them to a new tableau stack
	//returns T/F so I know if an operation occured
	public boolean switchStack(Card move, TableauStack other){
		LLNode<Card> pointer = top;
		int count = 1;
		//finds move card
		while(pointer != null && pointer.info.getVisible()) {
			if(pointer.info == move)
				break;
			pointer = pointer.getLink();
			count++;
		}
		//adds card stack to new pile
		if(pointer.getInfo() == move && pointer.info.getVisible()) {
			Card[] addnext = new Card[count];
			LLNode<Card> oldTop = top;
			//reassigns top to new top of stack
			top = pointer.getLink();
			if(top != null)
				top.getInfo().setVisible(true);
			//stores all cards before desired card into array
			for(int i = 0; i < count; i++) {
				addnext[i] = oldTop.getInfo();
				oldTop = oldTop.getLink();
			}
			Card[] temp = new Card[count];
			int k = count;
			for(int i = 0; i < count; i++) {
				temp[k-1] = addnext[i];
				k--;
			}
			//correctly places earlier cards onto new stack
			for(int j = count - 1; j > -1; j--) {
				other.addCard(temp[j]);
				//System.out.println("Card added:"+ temp[j].getShortName());
			}
			length = length - count;
			return true
		}
		//card not found
		else {
			System.out.println("INVALID OPERATION");
			return false;
		}
	}
	
	//prints a stack top to bottom with Xs for hidden cards
	public void printStack() {
		Card[] cards = new Card[length];
		LLNode<Card> pointer = top;
		//stores all cards in array
		for(int i = 0; i<length;i++) {
			cards[i] = pointer.getInfo();
			pointer = pointer.getLink();
		}
		//prints all cards in order
		for(int j = length - 1; j > -1; j--) {
			if(cards[j].getVisible())
				System.out.print(" "+cards[j].getShortName()+" ");
			else
				System.out.print(" X ");
		}
	}

	//used in Tableau printTableau method to print a full Tableau
	public String[] printArray(int size) {
		String[] returnArr = new String[size];
		Card[] cards = new Card[length];
		LLNode<Card> pointer = top;
		//stores all cards in array
		for(int i = 0; i<length;i++) {
			cards[i] = pointer.getInfo();
			pointer = pointer.getLink();
		}
		//case 1, all indices have a value
		if(length == size) {
			int count = 0;
			for(int j = size - 1; j > -1; j-- ) {
				String str = "";
				if(cards[j].getVisible()){
					str += " "+cards[j].getVal()+" ";
				}
				else
					str += " X ";
				returnArr[count] = str;
				count++;
			}
		}
		//case 2, some indices should be blank
		else {
			int count = 0;
			for(int j = length - 1; j > -1; j-- ) {
				String str = "";
				if(cards[j].getVisible()){
					str += " "+cards[j].getVal()+" ";
				}
				else
					str += " X ";
				returnArr[count] = str;
				count++;
			}
			int remaining = size - length;
			for(int k = 0; k < remaining; k++) {
				returnArr[k+length] = " - ";
			}
		}
		return returnArr;
	}

	//used in Tableau to see if stack is empty
	public boolean isEmpty() {
		if(top == null)
			return true;
		return false;
	}
	
	//checks if card in this stack can be placed on top of card on another stack
	// here must be the opposite color and have there.val - 1 as its val
	public boolean canStack(Card here, Card there) {
		//case 1, empty stack
		if(there == null) {
			if(here.getVal() == 13)
				return true;
			return false;
		}
		//case 2, there is a card with a val
		if(here.getVal()+1 == there.getVal()) {
			if(Math.abs(here.getColor()-there.getColor())== 1)
				return true;
		}
		return false;
	}

	//returns length, used for printTableau() in Tableau
	public int getLength() {return length;}
	//returns top, used for printTableau() in Tableau to make pointers
	public LLNode<Card> getTop() {return top;}
}
