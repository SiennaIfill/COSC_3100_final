/**
 * Class Name: Pile
 * @author Sienna Ifill
 * Created on: 3/24/2024
 * Description: 
 *   creates a Pile object that has a Card[] array and int pointer that always points to top (visible) card
 *   take() method removes a card from the array
 *   flip() method moves the pointer to the next array and creates a new, likely smaller array when the end of the array is reached
 */
public class Pile {
	private Card[] cards;
	private int pointer, length;
	
	//initialize Pile with Card array and a pointer at index zero
	public Pile(Card[] cards) {
		this.cards = cards;
		pointer = 0;
		length = cards.length;
	}
	//returns true if pile is empty
	public boolean isEmpty() {return length == 0;}
	//returns the 'top' card and removes it from the array
	public Card take() {
		if(length == 0)
			return new Card(0,0);
		Card toReturn = cards[pointer];
		cards[pointer] = null;
		try{
			goBack();
		}catch(ArrayIndexOutOfBoundsException e) {
			reset();
			if(length == 1) {
				length = 0;
			}
		}
		return toReturn;
	}

	//used in take() to return to last valid card after a card has been removed
	private void goBack() {
		//most recent card becomes top card
		while(pointer > -1 && cards[pointer] == null) {
			pointer--;	
		}
		//special case, all previous cards are null
		if(pointer == -1 && length - 1 <= 0) {
			pointer++;
			while(cards[pointer] == null&&!isEmpty()) {
				flip();
			}
		}
	}
	
	//flips card from top of pile to waste, flips whole pile if top card is the end of the array
	public void flip() {
		pointer++;
		//special case, pile is empty (nothing should run if length == 0)
		if(length < 1) {
			length = 0;
			return;
		}
		//special case, end of array reached-- need to make smaller array and send pointer back to top
		if(pointer>length) {
			int voidCount = 0;
			for(int i = 0; i < length; i++) {
				if(cards[i] == null)
					voidCount++;
			}
			int newLength = length-voidCount;
			Card[] newCards = new Card[newLength];
			int cardCount = 0;
			for(int j = 0; j < length; j++) {
				if(cardCount == newLength)
					break;
				if(cards[j] != null) {
					newCards[cardCount] = cards[j];
					cardCount++;
				}
			}
			cards = newCards;
			length = newLength;
			pointer = 0;
		}
		// finds next non-null card (for when goBack() has been called so I don't need to flip a million times)
		if(length >= 1) {
			try {
				while(cards[pointer] == null) {
					flip();
				}
			}catch(ArrayIndexOutOfBoundsException e) {}
		}
	}

	//prints pile with all cards after pointer hidden-- will be changed later
	public void printPile() {
		//special case, pile is empty
		if(length == 0) {
			System.out.print("empty pile");
		}
		for(int i = 0; i < length; i++) {
			if(i==pointer) {
				if(cards[i] !=null) {
					System.out.print(" "+cards[i].getShortName()+" ");
				}
			}
			else {
				if(cards[i] != null){
					System.out.print(" X ");
				}
			}
		}
	}

	//used in Finisher when game is unwinnable for checking purposes
	public void printVisPile() {
		//special case, pile is empty
				if(length == 0) {
					System.out.print("empty pile");
				}
				for(int i = 0; i < length; i++) {
					if(cards[i] !=null) 
						System.out.print(" "+cards[i].getShortName()+" ");	
				}
	}
	
	//returns the top card, the pointer
	public Card getTop() { 
		if(length == 0) {
			return new Card(0,0);
		}
		return cards[pointer];
	}

	//returns card at index 0
	public Card firstIndex() {
		try {
			return cards[0];
		}catch(NullPointerException e) {}
		return null;
	}
	
	//returns current length of pile array
	public int getLength() {
		return cards.length;
	}
	//sets pile with current cards at correct length, used in finisher
	public void reset() {
		int voidCount = 0;
		for(int i = 0; i < length; i++) {
			if(cards[i] == null)
				voidCount++;
		}
		int newLength = length-voidCount;
		Card[] newCards = new Card[newLength];
		int cardCount = 0;
		for(int j = 0; j < length; j++) {
			if(cardCount == newLength)
				break;
			if(cards[j] != null) {
				newCards[cardCount] = cards[j];
				cardCount++;
			}
		}
		cards = newCards;
		length = newLength;
		pointer = 0;
	}
}
